This is true of both spoken/written languages and programming languages. It’s often
subtle: A language gently guides you into certain modes of thought and away from
others. Java is particularly opinionated.
Java is a derived language. The original language designers didn’t want to use C++ for
a project, so created a new language which unsurprisingly looked a lot like C++, but
with improvements. The core changes were the incorporation of a virtual machine
and garbage collection, both of which are described in detail in this book. Java is
also responsible for pushing the industry forward in other ways; for example, most
languages are now expected to include documentation markup syntax and a tool to
produce HTML documentation.
One of the most predominant Java concepts came from the SmallTalk language,
which insists that the “object” (described in the next chapter) is the fundamental
unit of programming, so everything must be an object. Time has tested this belief?
and found it overenthusiastic. Some folks even declare that objects are a complete
failure and should be discarded. Personally, I find that making everything an object.
is not only an unnecessary burden but also pushes many designs in a poor direction.
However, there are still situations where objects shine. Requiring that everything be
an object (especially all the way down to the lowest level) is a design mistake, but
banning objects altogether seems equally draconian.
Other Java language decisions haven’t panned out as promised. Throughout this book
I attempt to explain these so you not only understand those features, but also why
they might not feel quite right to you. It’s not about declaring that Java is a good
language or a bad one. If you understand the flaws and limitations of the language
you will:
1. Not get stymied when you encounter a feature that seems “off.”
Introduction 12
2. Design and code better by knowing where the boundaries are.
Programming is about managing complexity: the complexity of the problem, laid
upon the complexity of the machine. Because of this complexity, most of our
programming projects fail.